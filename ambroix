#!/bin/bash -i
# Bootstrap an Arch system.

# Utilities before anything else: "print a usage message"
SITE="http://github.com/cceckman/distro"
usage() {
 PRRET="$?" 
  cat - <<EOS
Usage:
  $0 [-p <pfpath>] [-u <pfpath>] <platform> <user>

  <platform> is one of the subdirectories of platforms/.
  <user> is the user account to set up on the target machine. Optionally,
    it may also be a directory in users/.
  
  <pfpath> are optional paths to the platform (-p) and user (-u) promptfiles,
    containing saved information from the last time information was requested
    from the user. These allow a user to bypass the 'prompt' hooks if a previous
    run of the script was aborted.
    These paths may point to files that don't exist, in which case the results
    of prompts will be written to them.

Requires, on the host machine:
  which; mktemp; bash; grep; realpath; and anything required from the
  platform-dependent "verify" hook.

See $SITE for more complete usage information.
EOS
  exit "$PRRET"
}

# Dependencies.
f=common/depend.fn.sh; source $f || { >&2 echo "$f not found!" && exit 2; }
f=common/err.fn.sh; source $f || { >&2 echo "$f not found!" && exit 2; }
f=common/yesno.fn.sh; source $f || { >&2 echo "$f not found!" && exit 2; }

## Host Dependencies
depend mktemp || usage $?
depend grep || usage $?
depend realpath || usage $?

# Get promptfile arguments
while getopts :p:u: opt
do
  case $opt in
    p)
      PLAT_PROMPT="$OPTARG"
      shift $((OPTIND-1))
      OPTIND=1
      ;;
    u)
      USER_PROMPT="$OPTARG"
      shift $((OPTIND-1))
      OPTIND=1
      ;;
    \?)
      err echo "Unrecognized option -$OPTARG!"
      usage 1
      ;;
  esac
done
if [ -z ${PLAT_PROMPT+x} ]
then
  PLAT_PROMPT=$(mktemp)
fi
if [ -z ${USER_PROMPT+x} ]
then
  USER_PROMPT=$(mktemp)
fi
if [[ "$(realpath ${PLAT_PROMPT})" == "$(realpath ${USER_PROMPT})" ]]
then
  err "Cannot use the same path for user and platform promptfiles!"
  usage 1
fi
echo "Using promptfiles:"
echo "  plat: $PLAT_PROMPT"
echo "  user: $USER_PROMPT"

# Ensure that user and platform are present
if (( $# != 2 ))
then
  err "Wrong number of arguments"
  usage 1
fi

export TGT_PLATFORM="$1"
export TGT_USER="$2" # User
STAGES="verify prompt image"


## Check for platform, platform hooks
if ! [[ -d "platforms/$TGT_PLATFORM" ]]
then
  err "Platform '$TGT_PLATFORM' not found!"
  err "Supported platforms:"
  for platform in $(ls platforms)
  do
    err "	$platform"
  done
  err "See $SITE for more information."
  exit 2
fi

for hook in $STAGES
do
  if ! [ -f "platforms/$TGT_PLATFORM/$hook" ] || ! [ -x "platforms/$TGT_PLATFORM/$hook" ]
  then
    err "Hook '$hook' for platform '$TGT_PLATFORM' not found, or is not executable."
    err "Required hooks:"
    for hoook in $STAGES
    do
      err "	$hoook"
    done
    err "See $SITE for more information."
    exit 2
  fi
done

# Run stages semi-independently, since we don't run later stages on the host.
HOST_STAGES="verify|prompt|image"
for stage in $( echo "$STAGES" | grep -Po "$HOST_STAGES" )
do
  # Platform
  {
    echo "Running hook '$stage' for platform '$TGT_PLATFORM'"
    platforms/$TGT_PLATFORM/$stage $PLAT_PROMPT \
      && echo "Hook '$stage' for platform '$TGT_PLATFORM' complete."
  } || {
    ret=$?
    err "'$stage' for platform '$TGT_PLATFORM' exited with code $ret; terminating."
    exit $ret
  }
  # User
  if [ -f "users/$TGT_USER/$stage" ] && [ -x "users/$TGT_USER/$stage" ]
  then
    {
      echo "Running hook '$stage' for user '$TGT_USER'"
      users/$TGT_USER/$stage $USER_PROMPT \
        && echo "Hook '$stage' for user '$TGT_USER' complete."
    } || {
      ret=$?
      err "'$stage' hook for user '$TGT_USER' exited with code $ret; terminating."
      exit $ret
    }
  elif [ -f "users/$TGT_USER/$stage" ] && ! [ -x "users/$TGT_USER/$stage" ]
  then
    err "'$stage' hook for user '$TGT_USER' found, but not executable! This is probably an error."
    if ! yesno "Continue anyway?"
    then
      exit 3
    fi
  else
    echo "Hook '$stage' for user '$TGT_USER' not found; skipping."
  fi
done

