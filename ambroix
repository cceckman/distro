#!/bin/bash -i
# Bootstrap an Arch system.

# Utilities before anything else: "print a usage message"
SITE="http://github.com/cceckman/distro"
usage() {
 PRRET="$?" 
  cat - <<EOS
Usage:
  $0 <platform> <user>
where <platform> is one of those found in platforms/.

Requires, on the host machine:
  which; mktemp; bash; grep; and anything required from the platform-dependent
  "verify" hook.

See $SITE for more complete usage information.
EOS
  exit "$PRRET"
}
# Check presence before sourcing
src() {
  F="$1"
  if ! [[ -f $F ]]
  then
    
    exit $2
  fi
  source "$F"
}

if (( $# != 2 ))
then
  >&2 echo "Wrong number of arguments"
  usage 1
fi

p="$1" # Platform
u="$2" # User
STAGES="verify prompt"

# PRE-STAGE
f=common/depend.fn.sh; source $f || { >&2 echo "$f not found!" && exit 2; }
f=common/err.fn.sh; source $f || { >&2 echo "$f not found!" && exit 2; }
f=common/yesno.fn.sh; source $f || { >&2 echo "$f not found!" && exit 2; }

## Host Dependencies
depend mktemp || usage $?
depend grep || usage $?


## Check for platform, platform hooks
if ! [[ -d "platforms/$p" ]]
then
  err "Platform '$p' not found!"
  err "Supported platforms:"
  for platform in $(ls platforms)
  do
    err "	$platform"
  done
  err "See $SITE for more information."
  exit 2
fi

for hook in $STAGES
do
  if ! [ -f "platforms/$p/$hook" ] || ! [ -x "platforms/$p/$hook" ]
  then
    err "Hook '$hook' for platform '$p' not found, or is not executable."
    err "Required hooks:"
    for hoook in $STAGES
    do
      err "	$hoook"
    done
    err "See $SITE for more information."
    exit 2
  fi
done

# Make
PLAT_PROMPT=$(mktemp)
USER_PROMPT=$(mktemp)
echo "Using promptfiles:"
echo "  plat: $PLAT_PROMPT"
echo "  user: $USER_PROMPT"

# Run stages semi-independently, since we don't run later stages on the host.
HOST_STAGES="verify|prompt|image"
for stage in $( echo "$STAGES" | grep -Po "$HOST_STAGES" )
do
  # Platform
  {
    echo "Running hook '$stage' for platform '$p'"
    platforms/$p/$stage $PLAT_PROMPT \
      && echo "Hook '$stage' for platform '$p' complete."
  } || {
    ret=$?
    err "'$stage' for platform '$p' exited with code $ret; terminating."
    exit $ret
  }
  # User
  if [ -f "users/$u/$stage" ] && [ -x "users/$u/$stage" ]
  then
    {
      echo "Running hook '$stage' for user '$u'"
      users/$u/$stage $USER_PROMPT \
        && echo "Hook '$stage' for user '$u' complete."
    } || {
      ret=$?
      err "'$stage' hook for user '$u' exited with code $ret; terminating."
      exit $ret
    }
  elif [ -f "users/$u/$stage" ] && ! [ -x "users/$u/$stage" ]
  then
    err "'$stage' hook for user '$u' found, but not executable! This is probably an error."
    if ! yesno "Continue anyway?"
    then
      exit 3
    fi
  else
    echo "Hook '$stage' for user '$u' not found; skipping."
  fi
done

